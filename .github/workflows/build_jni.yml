# Это имя твоего Workflow, оно будет отображаться на странице "Actions" на GitHub
name: Build JNI with Android NDK r21e

# Когда этот Workflow должен запускаться
on:
  # Запускается при каждом пуше (push) в ветку 'main'
  push:
    branches:
      - main
  # Запускается при каждом создании или обновлении Pull Request'а в ветку 'main'
  pull_request:
    branches:
      - main

# Определение задач (jobs), которые будут выполняться
jobs:
  # Первая и единственная задача в этом Workflow
  build-jni-library:
    # Указываем, на какой операционной системе будет выполняться задача.
    # ubuntu-latest - это текущая последняя версия Ubuntu, которая предоставляет GitHub.
    runs-on: ubuntu-latest

    # Шаги, которые будут выполняться в рамках задачи build-jni-library
    steps:
    - name: Checkout repository code # Шаг 1: Загружаем твой код из репозитория на виртуальную машину GitHub Actions.
      uses: actions/checkout@v4 # Используем официальное действие GitHub для клонирования репозитория.

    - name: Set up Java Development Kit (JDK) # Шаг 2: Устанавливаем Java JDK. NDK для работы может требовать JDK.
      uses: actions/setup-java@v4 # Используем официальное действие GitHub для настройки Java.
      with:
        distribution: 'temurin' # Рекомендуемая дистрибуция JDK.
        java-version: '17' # Версия Java, которую будем использовать. JDK 11 или 17 обычно хорошо подходят.

    - name: Set up Android SDK # Шаг 3: Устанавливаем Android SDK. Это нужно для Android NDK.
      uses: android-actions/setup-android@v3 # Используем стороннее действие для установки Android SDK.

    - name: Download and Unzip Android NDK r21e # Шаг 4: Скачиваем и распаковываем нужную версию Android NDK.
      run: |
        # Мы выбрали NDK r21e, так как она хорошо совместима с ndk-build
        # на современных системах и решает проблему с libncurses.so.5.
        # Это официальная ссылка на NDK r21e для Linux (x86_64).
        wget https://dl.google.com/android/repository/android-ndk-r21e-linux-x86_64.zip -O android-ndk.zip
        # Распаковываем архив в домашнюю директорию пользователя.
        unzip android-ndk.zip -d "$HOME/android-ndk"
        # Переименовываем папку для удобства.
        mv "$HOME/android-ndk/android-ndk-r21e" "$HOME/android-ndk/ndk-r21e"
      # Заметь, что мы скачиваем версию для Linux (linux-x86_64.zip),
      # так как GitHub Actions работает на Linux-машинах.

    - name: Add NDK to PATH environment variable # Шаг 5: Добавляем путь к NDK в переменную окружения PATH.
      run: |
        # Это позволяет выполнять команду 'ndk-build' из любого места,
        # без указания полного пути к ней.
        echo "ANDROID_NDK_HOME=$HOME/android-ndk/ndk-r21e" >> $GITHUB_ENV
        echo "$HOME/android-ndk/ndk-r21e" >> $GITHUB_PATH

    - name: Build JNI Project # Шаг 6: Собственно, запускаем процесс компиляции твоего JNI-проекта!
      run: |
        # Переходим в папку 'src/main' внутри твоего репозитория.
        # Важно: ndk-build по умолчанию ищет папки 'jni' (с Android.mk и Application.mk)
        # относительно текущей директории, из которой он запущен.
        # Поэтому, если твоя структура JNI_Project/src/main/jni,
        # то cd src/main - это правильный путь.
        cd src/main
        # Запускаем сборку. NDK сам найдет Android.mk и Application.mk в папке jni.
        ndk-build
      # Если у тебя возникнут проблемы со сборкой, и ты увидишь ошибки,
      # связанные с Android.mk, Application.mk или поиском исходников,
      # возможно, тебе придется немного настроить свои mk-файлы,
      # или скорректировать этот cd-путь, если твоя структура отличается.
      # Но, судя по твоей структуре, src/main должно быть ок.

    - name: Upload compiled libraries as an artifact (Optional) # Шаг 7: Сохраняем скомпилированные .so файлы.
      uses: actions/upload-artifact@v4 # Используем официальное действие GitHub для загрузки артефактов.
      with:
        name: jni-compiled-libraries # Имя архива, под которым ты сможешь скачать свои библиотеки.
        path: src/main/libs # Путь, куда ndk-build по умолчанию сохраняет скомпилированные библиотеки (.so файлы).
        # Этот путь должен содержать подпапки для разных архитектур (например, armeabi-v7a, arm64-v8a).
        # Если ndk-build сохраняет их в другом месте (например, src/main/obj/local),
        # то измени этот путь соответственно.
